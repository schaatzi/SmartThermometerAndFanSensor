#include <Arduino.h>
#define MIC_PIN 7          // Connect MAX4466 to GPIO34 (ADC-capable)
#define LED_PIN 15           // Onboard LED to show "furnace running"

const int sampleCount = 100;        // Number of samples per window (~1 second if sampling every 10ms)
const int soundThreshold = 25;      // Number of sound events needed to trigger

const int baselineOffset = 500;    // MAIN TUNING VARIABLE: Higher = less sensitive, Lower = more sensitive

int baselineLevel = 2048;           // Will be calibrated in setup() - center point around 1.65V
int minReading = 4095;              // Track min value for debugging
int maxReading = 0;                 // Track max value for debugging
int avgNoiseLevel = 0;              // Average noise level this cycle

int hitCount = 0;

void setup() {
  pinMode(MIC_PIN, INPUT);
  pinMode(LED_PIN, OUTPUT);
  Serial.begin(115200);
  
  // Calibrate baseline - take average of quiet readings
  Serial.println("Calibrating baseline... keep environment quiet");
  Serial.println("If Sound Events are always high even when quiet,");
  Serial.println("increase 'baselineOffset' in the code (try 100, 150, 200+)");
  delay(2000);
  
  long total = 0;
  for (int i = 0; i < 100; i++) {
    total += analogRead(MIC_PIN);
    delay(10);
  }
  baselineLevel = total / 100;
  Serial.print("Baseline level set to: ");
  Serial.println(baselineLevel);
  Serial.println("Now monitoring noise levels...");
  Serial.println("---");
}

void loop() {
  hitCount = 0;
  minReading = 4095;  // Reset for this cycle
  maxReading = 0;
  long totalReadings = 0;

  // Take samples over ~1 second
  for (int i = 0; i < sampleCount; i++) {
    int micValue = analogRead(MIC_PIN);
    totalReadings += micValue;
    
    // Track min/max for debugging
    if (micValue < minReading) minReading = micValue;
    if (micValue > maxReading) maxReading = micValue;
    
    // Check for deviation from baseline (sound activity)
    int deviation = abs(micValue - baselineLevel);
    if (deviation > baselineOffset) {
      hitCount++;
    }
    delay(10);  // 100Hz sampling
  }

  // Calculate average noise level
  avgNoiseLevel = totalReadings / sampleCount;
  int currentDeviation = abs(avgNoiseLevel - baselineLevel);

  // Detailed noise level output
  Serial.print("Baseline: "); Serial.print(baselineLevel);
  Serial.print(" | Current Avg: "); Serial.print(avgNoiseLevel);
  Serial.print(" | Deviation: "); Serial.print(currentDeviation);
  Serial.print(" | Min: "); Serial.print(minReading);
  Serial.print(" | Max: "); Serial.print(maxReading);
  Serial.print(" | Range: "); Serial.print(maxReading - minReading);
  Serial.print(" | Sound Events: "); Serial.println(hitCount);

  if (hitCount > soundThreshold) {
    digitalWrite(LED_PIN, HIGH);  // Furnace ON
    Serial.println(">>> FURNACE LIKELY ON <<<");
  } else {
    digitalWrite(LED_PIN, LOW);   // Furnace OFF
    Serial.println("Furnace likely OFF");
  }
  
  Serial.println("---");
}